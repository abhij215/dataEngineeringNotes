MYSQL
=====
MySQL is a widely used relational database management system (RDBMS).
MySQL is free and open-source.
MySQL is ideal for both small and large applications.


What is RDBMS?
RDBMS stands for Relational Database Management System.
RDBMS is a program used to maintain a relational database.
RDBMS is the basis for all modern database systems such as MySQL, Microsoft SQL Server, Oracle, and Microsoft Access.
RDBMS uses SQL queries to access the data in the database.

What is a Database Table?
A table is a collection of related data entries, and it consists of columns and rows.
A column holds specific information about every record in the table.
A record (or row) is each individual entry that exists in a table.


What is a Relational Database?
A relational database defines database relationships in the form of tables. The tables are related to each other - based on data common to each.


Keep in Mind That...
SQL keywords are NOT case sensitive: select is the same as SELECT

1.The MySQL SELECT Statement
  The SELECT statement is used to select data from a database.
  
  SYNTAX : SELECT * FROM <table_name>

  Eg: select * from customers

2.The MySQL SELECT DISTINCT Statement
  The SELECT DISTINCT statement is used to return only distinct (different) values.

  SYNTAX : SELECT DISTINCT <column> from <table_name>

  Eg: select distinct name from customers

3.The MySQL WHERE Clause
  The WHERE clause is used to filter records.
  It is used to extract only those records that fulfill a specified condition.

  SYNTAX : SELECT * FROM <table_name>
           WHERE <condition>

  Eg: select state from country where population>200000


4.The WHERE clause can be combined with AND, OR, and NOT operators.
  The AND and OR operators are used to filter records based on more than one condition:
  The AND operator displays a record if all the conditions separated by AND are TRUE.
  The OR operator displays a record if any of the conditions separated by OR is TRUE.
  The NOT operator displays a record if the condition(s) is NOT TRUE.

  AND Syntax
  ==========
  SELECT column1, column2, ...
  FROM table_name
  WHERE condition1 AND condition2 AND condition3 ...;

  OR Syntax
  =========
  SELECT column1, column2, ...
  FROM table_name
  WHERE condition1 OR condition2 OR condition3 ...;

  NOT Syntax
  ===========
  SELECT column1, column2, ...
  FROM table_name
  WHERE NOT condition;


5.The MySQL ORDER BY Keyword
  The ORDER BY keyword is used to sort the result-set in ascending or descending order.
  The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.

  ORDER BY Syntax
  ===============
  SELECT column1, column2, ...
  FROM table_name
  ORDER BY column1, column2, ... ASC|DESC;

  eg: SELECT * FROM Customers ORDER BY Country
      SELECT * FROM Customers ORDER BY Country DESC
      SELECT * FROM Customers ORDER BY Country, CustomerName
      SELECT * FROM Customers ORDER BY Country ASC, CustomerName DESC;
      


6.The MySQL INSERT INTO Statement
  The INSERT INTO statement is used to insert new records in a table.

  INSERT INTO Syntax
  It is possible to write the INSERT INTO statement in two ways:
  1. Specify both the column names and the values to be inserted:

  INSERT INTO table_name (column1, column2, column3, ...)
  VALUES (value1, value2, value3, ...);

  2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. 
     However, make sure the order of the values is in the same order as the columns in the table. Here, the INSERT INTO syntax would be as follows:

  INSERT INTO table_name
  VALUES (value1, value2, value3, ...);


7.What is a NULL Value?
  A field with a NULL value is a field with no value.

  If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. 
  Then, the field will be saved with a NULL value.

  Note: A NULL value is different from a zero value or a field that contains spaces. 
  A field with a NULL value is one that has been left blank during record creation!
 

  How to Test for NULL Values?
  It is not possible to test for NULL values with comparison operators, such as =, <, or <>.

  We will have to use the IS NULL and IS NOT NULL operators instead.

  IS NULL Syntax
  ==============
  SELECT column_names
  FROM table_name
  WHERE column_name IS NULL;

  IS NOT NULL Syntax
  ==================
  SELECT column_names
  FROM table_name
  WHERE column_name IS NOT NULL;


8.The MySQL UPDATE Statement
  The UPDATE statement is used to modify the existing records in a table.

  UPDATE Syntax
  =============
  UPDATE table_name
  SET column1 = value1, column2 = value2, ...
  WHERE condition;
  
  Eg: UPDATE Customers
      SET ContactName = 'Alfred Schmidt', City = 'Frankfurt'
      WHERE CustomerID = 1;

  Note: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. 
  The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, 
  all records in the table will be updated!


9.The MySQL DELETE Statement
  The DELETE statement is used to delete existing records in a table.

  DELETE Syntax
  =============
  DELETE FROM table_name WHERE condition;

  Eg: DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';

  Note: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. 
  The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, 
  all records in the table will be deleted!


10.The MySQL LIMIT Clause
   The LIMIT clause is used to specify the number of records to return.

   The LIMIT clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.

  LIMIT Syntax
  ============
  SELECT column_name(s)
  FROM table_name
  WHERE condition
  LIMIT number;

  select * from customer limit 3


11.MySQL MIN() and MAX() Functions
  The MIN() function returns the smallest value of the selected column.

  The MAX() function returns the largest value of the selected column.

  MIN() Syntax
  ============
  SELECT MIN(column_name)
  FROM table_name
  WHERE condition;

  eg: SELECT MIN(Price) AS SmallestPrice
      FROM Products;

  MAX() Syntax
  =============
  SELECT MAX(column_name)
  FROM table_name
  WHERE condition;

  eg:SELECT MAX(Price) AS SmallestPrice
     FROM Products;

12.MySQL COUNT(), AVG() and SUM() Functions

  (a)The COUNT() function returns the number of rows that matches a specified criterion.

  COUNT() Syntax
  ==============
  SELECT COUNT(column_name)
  FROM table_name
  WHERE condition;
 
  eg: select count(price) from customers where country = 'india'

  The AVG() function returns the average value of a numeric column. 

  AVG() Syntax
  ============
  SELECT AVG(column_name)
  FROM table_name
  WHERE condition;
 
  Eg: select avg(price) from customers where country = 'india'

  The SUM() function returns the total sum of a numeric column. 

  SUM() Syntax
  ============ 
  SELECT SUM(column_name)
  FROM table_name
  WHERE condition;
 
  Eg: select sum(price) from customers


13.The MySQL LIKE Operator
   The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

   There are two wildcards often used in conjunction with the LIKE operator:

   The percent sign (%) represents zero, one, or multiple characters
   The underscore sign (_) represents one, single character
   The percent sign and the underscore can also be used in combinations! 

   LIKE Syntax
   ===========
   SELECT column1, column2, ...
   FROM table_name
   WHERE columnN LIKE pattern;

   Tip: You can also combine any number of conditions using AND or OR operators.

14.MySQL Wildcard Characters
   A wildcard character is used to substitute one or more characters in a string.

   Wildcard characters are used with the LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

   Wildcard Characters in MySQL

   Symbol              |     	Description	Example
   ---------------------------------------------------------------------------------------------------
     %	 	     |	Represents zero or more characters	bl% finds bl, black, blue, and blob
   ---------------------------------------------------------------------------------------------------
     _		     |	Represents a single character	h_t finds hot, hat, and hit
   ---------------------------------------------------------------------------------------------------

  The wildcards can also be used in combinations!

  Here are some examples showing different LIKE operators with '%' and '_' wildcards:

  LIKE Operator				|	Description
  -----------------------------------------------------------------------------------------------------------------------
  WHERE CustomerName LIKE 'a%'	|	Finds any values that starts with "a"
  -----------------------------------------------------------------------------------------------------------------------
  WHERE CustomerName LIKE '%a'	|	Finds any values that ends with "a"
  -----------------------------------------------------------------------------------------------------------------------
  WHERE CustomerName LIKE '%or%'	|	Finds any values that have "or" in any position
  -----------------------------------------------------------------------------------------------------------------------
  WHERE CustomerName LIKE '_r%'	|	Finds any values that have "r" in the second position
  -----------------------------------------------------------------------------------------------------------------------
  WHERE CustomerName LIKE 'a_%_%'	|	Finds any values that starts with "a" and are at least 3 characters in length
  -----------------------------------------------------------------------------------------------------------------------
  WHERE ContactName LIKE 'a%o'	|	Finds any values that starts with "a" and ends with "o"
  -----------------------------------------------------------------------------------------------------------------------


15.The MySQL IN Operator
   The IN operator allows you to specify multiple values in a WHERE clause.

   The IN operator is a shorthand for multiple OR conditions.

   IN Syntax
   =========
   SELECT column_name(s)
   FROM table_name
   WHERE column_name IN (value1, value2, ...);

   or:

   SELECT column_name(s)
   FROM table_name
   WHERE column_name IN (SELECT STATEMENT);

   eg: select * from country where country in ('germany','australia','india')
       select * from country where country not in ('india','USA')
       select * from country where country in (select country from suppliers)


16.The MySQL BETWEEN Operator
   The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.

   The BETWEEN operator is inclusive: begin and end values are included.

   BETWEEN Syntax
   ==============
   SELECT column_name(s)
   FROM table_name
   WHERE column_name BETWEEN value1 AND value2;

   eg: select * from customers where price between 14 and 25



17.MySQL Aliases
   Aliases are used to give a table, or a column in a table, a temporary name.
   Aliases are often used to make column names more readable.
   An alias only exists for the duration of that query.
   An alias is created with the AS keyword.

   Alias Column Syntax
   ====================
   SELECT column_name AS alias_name
   FROM table_name;

   select max(price) as max_price, min(price) as min_price


18. MySQL Joining Tables
    A JOIN clause is used to combine rows from two or more tables, based on a related column between them.

    Supported Types of Joins in MySQL
    =================================
    INNER JOIN: Returns records that have matching values in both tables  
    LEFT JOIN: Returns all records from the left table, and the matched records from the right table
    RIGHT JOIN: Returns all records from the right table, and the matched records from the left table
    CROSS JOIN: Returns all records from both tables


    1.MySQL INNER JOIN Keyword
    ===========================
      The INNER JOIN keyword selects records that have matching values in both tables.

      INNER JOIN Syntax
      =================
      SELECT column_name(s)
      FROM table1
      INNER JOIN table2
      ON table1.column_name = table2.column_name;

      eg: select o.order_id, c.customer_id
          from orders o
          inner join customers c on o.customer_id = c.customer_id

          SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
          FROM ((Orders
          INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
          INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID)



     2.MySQL LEFT JOIN Keyword
       The LEFT JOIN keyword returns all records from the left table (table1), and the matching records (if any) from the right table (table2).

       LEFT JOIN Syntax
       ================
       SELECT column_name(s)
       FROM table1
       LEFT JOIN table2
       ON table1.column_name = table2.column_name;

       eg:
       select o.orderid, c.customer_id
       from orders o
       left join customers c
       on o.orders_id = c.customers_id


     
     3.MySQL RIGHT JOIN Keyword
       The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records (if any) from the left table (table1).

       RIGHT JOIN Syntax
       =================
       SELECT column_name(s)
       FROM table1
       RIGHT JOIN table2
       ON table1.column_name = table2.column_name;

       eg:
       select o.orderid, c.customer_id
       from orders o
       left join customers c
       on o.orders_id = c.customers_id
 
      
     4.CROSS JOIN Keyword
       The CROSS JOIN keyword returns all records from both tables (table1 and table2).

       CROSS JOIN Syntax
       =================
       SELECT column_name(s)
       FROM table1
       CROSS JOIN table2;


       eg: SELECT Customers.CustomerName, Orders.OrderID
           FROM Customers
           CROSS JOIN Orders;   


       NOTE: If you add a WHERE clause (if table1 and table2 has a relationship),  
             the CROSS JOIN will produce the same result as the INNER JOIN clause:



     5.MySQL Self Join
      =================
       A self join is a regular join, but the table is joined with itself.

      Self Join Syntax
      ================
      SELECT column_name(s)
      FROM table1 T1, table1 T2
      WHERE condition;

      eg:
      SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City
      FROM Customers A, Customers B
      WHERE A.CustomerID <> B.CustomerID
      AND A.City = B.City
      ORDER BY A.City;

19. The MySQL UNION Operator
    The UNION operator is used to combine the result-set of two or more SELECT statements.

    Every SELECT statement within UNION must have the same number of columns
    The columns must also have similar data types
    The columns in every SELECT statement must also be in the same order

    UNION Syntax
    ============
    SELECT column_name(s) FROM table1
    UNION
    SELECT column_name(s) FROM table2;

    UNION ALL Syntax
    ================
    The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL:

    SELECT column_name(s) FROM table1
    UNION ALL
    SELECT column_name(s) FROM table2;

    Note: The column names in the result-set are usually equal to the column names in the first SELECT statement.


	
20.The GROUP BY statement groups rows that have the same values into summary rows, like "find the number of customers in each country".

   The GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.

   GROUP BY Syntax
   ===============
   SELECT column_name(s)
   FROM table_name
   WHERE condition
   GROUP BY column_name(s)
   ORDER BY column_name(s);

   Example
   SELECT COUNT(CustomerID), Country
   FROM Customers
   GROUP BY Country;



21.The MySQL HAVING Clause
   The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.

   HAVING Syntax
   =============
   SELECT column_name(s)
   FROM table_name  
   WHERE condition
   GROUP BY column_name(s)
   HAVING condition
   ORDER BY column_name(s);


   Example
   SELECT COUNT(CustomerID), Country
   FROM Customers
   GROUP BY Country
   HAVING COUNT(CustomerID) > 5;

22.The MySQL EXISTS Operator
   The EXISTS operator is used to test for the existence of any record in a subquery.

   The EXISTS operator returns TRUE if the subquery returns one or more records.

   EXISTS Syntax
   ==============
   SELECT column_name(s)
   FROM table_name
   WHERE EXISTS
   (SELECT column_name FROM table_name WHERE condition);


   Example
   SELECT SupplierName
   FROM Suppliers
   WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);



23.The MySQL ANY and ALL Operators
   The ANY and ALL operators allow you to perform a comparison between a single column value and a range of other values.

   The ANY operator
   ================

   returns a boolean value as a result
   returns TRUE if ANY of the subquery values meet the condition
   ANY means that the condition will be true if the operation is true for any of the values in the range.
   Note: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=).

   ANY Syntax
   ===========
   SELECT column_name(s)
   FROM table_name
   WHERE column_name operator ANY
   (SELECT column_name
   FROM table_name
   WHERE condition);

   Eg:
   SELECT ProductName
   FROM Products
   WHERE ProductID = ANY
     (SELECT ProductID
     FROM OrderDetails
     WHERE Quantity = 10);


   The ALL operator:
   ================
   returns a boolean value as a result
   returns TRUE if ALL of the subquery values meet the condition
   is used with SELECT, WHERE and HAVING statements
   ALL means that the condition will be true only if the operation is true for all values in the range.
   Note: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=).

   ALL Syntax With SELECT
   ======================
   SELECT ALL column_name(s)
   FROM table_name
   WHERE condition;

   ALL Syntax With WHERE or HAVING
   ===============================
   SELECT column_name(s)
   FROM table_name
   WHERE column_name operator ALL
   (SELECT column_name
   FROM table_name
   WHERE condition);



24.The MySQL INSERT INTO SELECT Statement
   The INSERT INTO SELECT statement copies data from one table and inserts it into another table.

   The INSERT INTO SELECT statement requires that the data types in source and target tables matches.

   Note: The existing records in the target table are unaffected.

   INSERT INTO SELECT Syntax
   =========================
   Copy all columns from one table to another table:

   INSERT INTO table2
   SELECT * FROM table1  
   WHERE condition;

   Copy only some columns from one table into another table:

   INSERT INTO table2 (column1, column2, column3, ...)
   SELECT column1, column2, column3, ...
   FROM table1
   WHERE condition;



25.The MySQL CASE Statement
   The CASE statement goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.

   If there is no ELSE part and no conditions are true, it returns NULL.

   CASE Syntax
   ===========
   CASE
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    WHEN conditionN THEN resultN
    ELSE result
   END;

   Example
   SELECT OrderID, Quantity,
   CASE
       WHEN Quantity > 30 THEN 'The quantity is greater than 30'
       WHEN Quantity = 30 THEN 'The quantity is 30'
       ELSE 'The quantity is under 30'
   END AS QuantityText
   FROM OrderDetails;


26.NULL FUNCTION

  MySQL IFNULL() Function
  The MySQL IFNULL() function lets you return an alternative value if an expression is NULL.

  The example below returns 0 if the value is NULL:

  SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0))
  FROM Products;


  MySQL COALESCE() Function
  Or we can use the COALESCE() function, like this:

  SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0))
  FROM Products;



27.COALESCE( ) Function

  The MySQL COALESCE() function is used for returning the first non-null value in a list of expressions. 
  If all the values in the list evaluate to NULL, then the COALESCE() function returns NULL.

  The COALESCE() function accepts one parameter which is the list which can contain various values. 
  The value returned by the MySQL COALESCE() function is the first non-null value in a list of 
  expressions or NULL if all the values in a list are NULL.

  Syntax:
  COALESCE(value_1, value_2, ...., value_n)

  Example: Implementing COALESCE() function on a list.
           SELECT COALESCE('A', NULL, 'B', NULL); 
  Output:
           A 














